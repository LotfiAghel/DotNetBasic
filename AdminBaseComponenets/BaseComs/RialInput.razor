



@using Microsoft.AspNetCore.Components.Rendering;




@using System.Collections.Generic


@using Newtonsoft.Json.Linq;


@inherits ValueInput<Rial>



<div class="row pt-2 pb-2">
    <div class="col-sm-10">
        <InputText id="name" class="form-control" placeholder="ریال"
                     readonly=@ReadOnly
                     @bind-Value=@longv onchange=@Click2() />
    </div>
    <span style="display:block">@getText2()</span>
</div>






@code
{
    public string getText2(){
        long r=value.Value;
        string res="";
        if(r>=10000000000){
            long a=r/10000000000;
             if(res.Length>0)
                res+=" و ";
            res+=a+"ملیارد";
            r%=10000000;
        }
        if(r>=10000000){
            long a=r/10000000;
             if(res.Length>0)
                res+=" و ";
            res+=a+"ملیون";
            r%=10000000;
        }
        if(r>=10000){
            long a=r/10000;
            if(res.Length>0)
                res+=" و ";
            res+=a+"هزار";
            r%=10000;
        }
        if(r>=10){
            long a=r/10;
            if(res.Length>0)
                res+=" و ";
            res+=a;
            r%=10;
        }
        res+="تومن";
        if(r>0){
            long a=r;
            if(res.Length>0)
                res+=" و ";
            res+=a+"ریال";
        }
        return res;

    }
    public string getText(){
        var st=value.ToString();
        string s="";
        int j=0;
        int zeroN=0;
        bool start=false;
        for(int i=st.Length-1; i>-1; --i){
            if(j>0 && j%3==0)
                s=","+s;
            if(start==false &&(st[i]!='0' || zeroN>=3+4)){
                start=true;
                j=(zeroN-1)%3;
            }
            if(start){
                s=st[i]+s; 
                ++j;   
            }else
                zeroN++;
        }
        var ex="R";
        if(zeroN>=4+3){
            ex="MT";    
            zeroN-=4+3;
        }else if(zeroN>=4){
            ex="KT";    
            zeroN-=4;
        }else if(zeroN>=1){
            ex="T";    
            zeroN-=1;
        }else{
            s=s.Substring(0,s.Length-1)+"/"+s[s.Length-1];
            ex="T";
        }
        for(int i=0; i<zeroN;++i)
            s+="0";
        s+=ex;
        return s;
    }

    public Rial getRial(string txt){
        decimal res0=0;
        decimal res=0;
        decimal dahgan=1;
        bool afterDot=false;

        for(int i=0; i<10; ++i)
            txt=txt.Replace((char)((int)'۰'+i),(char)((int)'0'+i));

        for(int i=0; i<txt.Length; ++i){
            if(!afterDot && (txt[i]=='.'||txt[i]=='/')){
                afterDot=true;
                continue;
            }
            if(txt[i]=='K'){
                res0+=res*1000;
                res=0;
                continue;
            }
            if(txt[i]=='M'){
                res0+=res*1000000;
                res=0;
                continue;
            }
            if(txt[i]=='T'){
                res0*=10;
                res*=10;
                break;
            }
            if(txt[i]<'0' || txt[i]>'9')
                continue;
            if(!afterDot){
                res*=10;
            }else{
                dahgan/=10;
            }
            res+=dahgan*(txt[i]-'0');

        }
        return new Rial((long)(res0+res));
    }

    public string longv {get => getText();
     set{
        this.value=getRial(value);
    }}

    

    Rial prvValue;
    

    async Task Click2()
    {
        //value=new Rial(longv);
        if (prvValue != value)
        {

            await changeRefrence.InvokeAsync(value);
        }
        prvValue = value;

    }

    }

