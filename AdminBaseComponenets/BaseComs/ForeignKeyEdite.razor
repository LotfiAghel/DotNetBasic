@typeparam TEntity
@typeparam TKEY
@inject NavigationManager NavManager



@using Microsoft.AspNetCore.Components.Rendering;




@using System.Collections.Generic


@using Models
@using Newtonsoft.Json.Linq;

@inherits ForeignKeyEditeBase<TEntity,TKEY>

@functions {

    //<DataList TItem2=@Coach TItem=@Coach url="/old/" url2=@Text >
    RenderFragment CreateDynamicComponent2() => builder =>
       {

           Console.WriteLine("CreateDynamicComponent2 " + genericArgs[0]);

           gridMetaClass = typeof(SearchPage<,>).MakeGenericType(genericArgs);



           Action<TKEY> onClickCustom = async (id) =>
           {
               showModal = false;
               await Click2(id);
               
           };



           
           builder.OpenComponent(0, gridMetaClass);
           builder.AddAttribute(1, nameof(SearchPage<TEntity, TKEY>.onClickCustom), onClickCustom);
           builder.CloseComponent();
       };
}



    <Row>

        <Column ColumnSize=ColumnSize.Is1>
            <Button Color="Color.Primary" Clicked="@OnButtonClicked" Size="Size.ExtraSmall"><Icon Name="IconName.Link" /></Button>
            <!--
                <Button Color="Color.Primary" Clicked="@OnButtonClicked" Size="Size.ExtraSmall"><Icon Name="IconName.Link" /></Button>
            -->
        </Column>

        <Column ColumnSize
        =ColumnSize.Is10
        >
            @if (optionGenerator != null)
            {

                <Select TValue=TKEY SelectedValue=@value.getFValue()
                SelectedValueChanged=@Click2
                ReadOnly=@ReadOnly>
                    @if (optionGenerator != null)
                    {
                        <SelectItem TValue=TKEY Value=default(TKEY)>
                            none @(default(TKEY))
                        </SelectItem>
                        foreach (var t in optionGenerator)
                        {

                            <SelectItem TValue=TKEY Value=@t.Value>
                                @if (itemComponenet != null)
                                {
                                    <div>@Program0.CreateDynamicComponent2(this, itemComponenet, t)</div>
                                }
                            </SelectItem>
                        }
                    }
                </Select>
            }
        </Column>
    @if (!ReadOnly)
    {
        @if (typeof(TEntity).GetCustomFirstAttributes<BigTable>() != null || true)
        {
            <Column ColumnSize
            =ColumnSize.Is1
            >
                <Button Color="Color.Primary" Clicked=@OnSearchClick Size=Size.ExtraSmall><Icon Name=IconName.Search /></Button>
            </Column>
        }
        @if (showModal)
        {
            genericArgs = Program0.getValueKeyPair(typeof(TEntity));
            <div class="modal fade show" id="myModal" style="display:block;overflow:visible" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">

                        <!-- Modal Header -->
                        <div class="modal-header">
                            <h4 class="modal-title">Confirm action</h4>
                            <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                        </div>

                        <div>@CreateDynamicComponent2()</div>;

                        <!-- Modal footer -->
                        <div class="modal-footer">
                            <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick=@ModalOk>Choose</button>
                        </div>

                    </div>
                </div>
            </div>
        }

    }
</Row>

<!-- <div>@optionGenerator.GetHashCode()</div>
<div>@optionGenerator.Count()</div>-->
