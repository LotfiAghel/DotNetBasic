@using ClTool
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http
@inherits ValueInput<string>

<p>
    <label>
        آپلود تا @maxAllowedFiles فایل:
        <InputFile OnChange="@OnInputFileChange" multiple />
    </label>
</p>

@if (files != null)
{
    <div class="card">
        <div class="card-body">
            <ul>
                <li>
                    نام فایل ذخیره شده: @files.Name
                    <br>
                    @if (uploadResults != null)
                    {
                        <span>
                             فایل : @uploadResults.StoredFileName
                        </span>
                        var nn = ClTool.WebClient.webClient.baseUrl + "StaticFiles/" + uploadResults.StoredFileName;
                        <img src=@nn class="img" />
                    }
                    else if (!string.IsNullOrWhiteSpace(value))
                    {
                        <span>
                             فایل : @files.Name
                        </span>
                        <img src=@value class="img" />
                    }
                    else
                    {
                        <span>
                            خطا در آپلود فایل
                        </span>
                    }
                    <div class="progress mb-3" style="height: 20px;">
                        <div class="progress-bar" role="progressbar" style="width: @ProgressPercentage%;" aria-valuenow="@ProgressPercentage" aria-valuemin="0" aria-valuemax="100">@ProgressPercentage% Complete</div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
}

@code {



    private File files = null;
    private UploadResult uploadResults = null;
    private int maxAllowedFiles = 1;
    private bool shouldRender;
    private IBrowserFile file;
    int ProgressPercentage = 0;
    protected override bool ShouldRender() => shouldRender;
    //string  serverUrl = "https://localhost:5000/";

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024L*1024 * 1024 *2;
        var upload = false;

        using var content = new MultipartFormDataContent();
        var buffers = new byte[1024*8];
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults is null)
            {
                //await myFile.OpenReadStream(maxAllowedSize: 1024 * 300).ReadAsync(buffers);
                //await file.OpenReadStream(maxAllowedSize: 1024*1024*1024 ).ReadAsync(buffers);
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 1024));
                byte[] b = new byte[1024 * 1024];
                files =
                    new File()
                    {
                        Name = file.Name,
                    };

                if (file.Size < maxFileSize)
                {
                    long totalBytesRead = 0;
                    long fileSize = file.Size;
                    var oldBase = ClTool.WebClient.webClient;
                    //await oldBase.fetch("", null, HttpMethod.Get);
                    var tmp = await oldBase.fetch<Models.CreateSessionParams, Models.SessionCreationStatusResponse>("api/file/create", HttpMethod.Post, new Models.CreateSessionParams()
                        {
                            FileName = file.Name,
                            ChunkSize = b.Length,
                            TotalSize = file.Size
                        });
                    value = tmp.FileName;
                    OnChange(value);
                    var fs = file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 1024);
                    ProgressPercentage = 0;
                    
                    while ( true)
                    {
                        var s=await fs.ReadAsync(b, 0, b.Length);
                        if (s < 1)
                            break;
                        await oldBase.uploadFileSection("api/file/upload", tmp.SessionId, 1, b);
                        totalBytesRead += s;
                        ProgressPercentage = (int)(totalBytesRead * 100 / fileSize);
                        //Console.WriteLine(temp.GetString(b));
                    }

                    uploadResults = null;
                    OnChange(value);
                }
                else
                {
                    //logger.LogInformation("{FileName} not uploaded", file.Name);

                    uploadResults = new UploadResult()
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false,
                    };
                }
            }
        }

        if (upload)
        {


            



        }

        shouldRender = true;
    }


    protected override void OnInitialized()
    {
        string fileName=null;
        if(value!=null){
            var valueArray = value.Split('/');
        
            fileName = valueArray[valueArray.Length - 1];
        }

        files = new File()
        {
            Name = fileName
        };
    }



    private class File
    {
        public string Name { get; set; }
    }
}