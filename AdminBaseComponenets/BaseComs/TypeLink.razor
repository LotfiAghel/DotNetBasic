@typeparam TType
@using System.Linq
@using Microsoft.Extensions.Logging
@using ClTool
@using MyRefelctionMirror;
@inject HttpClient Http
@using System;
@using System.Net;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;



@using System.Collections.Generic;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@using Tools;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Collections;


@functions {

    //<DataList TItem2=@Coach TItem=@Coach url="/old/" url2=@entityName >
      RenderFragment CreateDynamicComponent2(Type typeClass) => builder =>
   {
       

       var gt = typeof(AdminBaseComponenets.BaseComs.TypeLink<>).MakeGenericType(new Type[] {  typeClass });

       builder.OpenComponent(0, gt);
       /*Action<Type> onRedirect=(url)=>{
            //Console.WriteLine("constructor is nullllllllllllllllllll " + tt);
            Console.WriteLine("onRedirect "+url);
            typeClass=url;
            var typeName=url.GetName().Replace(".","__");
            StateHasChanged();
            //Click();
            var link="/typeshow2/"+typeName;
            //NavigationManager.NavigateTo(link, false);
       };
       var callback = EventCallback.Factory.Create<Type>(this, onRedirect);/**/
       builder.AddAttribute(1, "onRedirect", onRedirect);

       builder.CloseComponent();
   };
}



@if(typeClass!=null){
        
        if(typeClass.IsGenericType){
                        Action<object> onClickg = async (x) =>
                                        {
                                            await Click(typeClass.GetGenericTypeDefinition());
                                        };
                        <span><span onRedirect=@onClickg>@typeClass.GetGenericTypeDefinition().GetName()</span>&lt
                        @foreach(Type argType in typeClass.GetGenericArguments()){
                            Action<object> onClick = async (x) =>
                                        {
                                            await Click(argType);
                                        };
                            <p style="display: inline;">@CreateDynamicComponent2(argType)</p>;
                            
                        }
                        &gt</span>
        }else{
                    Action<object> onClick = async (x) =>
                                        {
                                            await Click(typeClass);
                                        };
                     <p style="display: inline;color:blue"   @onclick=@onClick>@typeClass.GetName()</p>
                    
                            
                            
        }
        
}   
                                            
                              


@code {


    public List<int> optionsV = new List<int>();
    public List<string> optionsL = new List<string>();

    [Parameter]
    public EventCallback<Type> onRedirect {get;set;}
  
    public Type typeClass;
    
    
    
    
    
      
    protected override async Task OnInitializedAsync()
    {
        
        typeClass=typeof(TType);

    }
    
    
    async Task Click(Type url)
    {
         
         await onRedirect.InvokeAsync(url);
         
    }







}
