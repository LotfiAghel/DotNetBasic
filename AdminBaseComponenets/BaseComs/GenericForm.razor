@typeparam TItem

@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Rendering;
@using AdminBaseComponenets;
@using Newtonsoft.Json
@using System.ComponentModel.DataAnnotations.Schema;
@inherits EditBase2<TItem>
@{
    if(value is null){
        <div>value is null</div>
    }
}
@{
    this.cacl();
    if(!(value is null)){
        <EditForm Model="@value">
            @{
                if (typeof(TItem).IsValueType && OnChange==null)
                {
                    OnChange = (x) =>
                    {
                        Console.WriteLine("mis onchange");


                    };
                }
                var md = MDTypeInfo.get(typeof(TItem));
                foreach (var property in propertis)
                {

                    bool readOnly = this.ReadOnly;
                    bool defultIgnore = false;
                    {
                        var y = property.GetCustomFirstAttributes<Models.IgnoreDefultForm>();
                        if (y != null && y.ignoreDefultForm)
                            continue;

                    }
                    {
                        defultIgnore =  defultIgnore || (property.GetCustomFirstAttributes<JsonIgnoreAttribute>()!=null);
                    }
                    {
                        ;
                        defultIgnore = defultIgnore || ((property.GetCustomFirstAttributes<ForeignKeyAttribute>() != null) && !md.pattrs[property].attrs.OfType<ForeignKeyAttr>().Any());
                    }
                    {
                        defultIgnore =  defultIgnore || (property.GetCustomFirstAttributes<InversePropertyAttribute>()!=null);
                        

                    }
                    if (defultIgnore)
                    {
                        readOnly = true;

                        var y = property.GetCustomFirstAttributes<Models.IgnoreDefultForm>();
                        if (y == null || y.ignoreDefultForm)
                            continue;
                    }



                    

                    var z = createProp0(property, readOnly);

                        
                        if (z != null)
                        {
                        Console.WriteLine($" {property.Name} : {z.GetType().Name} {z.inRowField()}");
                        @if (z.inRowField())
                        {
                            
                            <Row>
                                
                                    <Column ColumnSize=ColumnSize.Is2>
                                        <label for="pass">@property.GetPerisanName()</label>
                                    </Column>
                                
                                
                                <Column ColumnSize=ColumnSize.Is10>
                                    @showProp(property,z,readOnly)
                                </Column>
                            </Row>
                        }else{
                            <Column ColumnSize=ColumnSize.Is2>
                                <label for="pass">@property.GetPerisanName()</label>
                            </Column>

                            <Row>
                                   <Column ColumnSize=ColumnSize.Is12>
                                    @showProp(property,z,readOnly)
                                </Column>
                            </Row>
                        }
                        
                        }

                }
            }


            
        </EditForm>
    }
}


