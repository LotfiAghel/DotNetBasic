@typeparam TItem




@using Microsoft.AspNetCore.Components.Rendering;




@using System.Collections.Generic


@using Newtonsoft.Json.Linq;


@inherits PointerInputBase2<TItem>
<!--

<p style="display: inline;color:blue" @onclick=@Click0>close</p>

    @if (!ReadOnly)
    {
<Select TValue="string" SelectedValue=@typeName SelectedValueChanged=@Click2 >
    <SelectItem TValue="string" value="null">null</SelectItem>
    @foreach (var t in classess)
    {
        <SelectItem TValue="string" value=@t.Name>@t.GetPerisanName()</SelectItem>
    }
</Select>

    }
    else if (value != null)
    {
<div>@(value.GetType().Name)</div>
    }

@if (openOject)
{
    if (w != null)
    {
        <div>@Program0.CreateDynamicComponent2(this, w, value, null, new List<System.Attribute>(), ReadOnly);</div>
    }
}

-->
        <Accordion>
        <Collapse  Visible=@collapse1Visible>
             <CollapseHeader>
            <Heading Size="HeadingSize.Is4" >
                <Row Size="Size.ExtraSmall">
                <Column ColumnSize="ColumnSize.Is4">
                        <AccordionToggle >toggle</AccordionToggle>
                </Column>
                <Column ColumnSize=ColumnSize.Is8 >
                   @if(classess.Count() >0 ){
                        if(!ReadOnly){
                                        <Select TValue="string" SelectedValue=@typeName SelectedValueChanged=@Click2 Size="Size.ExtraSmall">
                                            <SelectItem TValue="string" value="null">null</SelectItem>
                                            @foreach (var t in classess)
                                            {
                                                <SelectItem TValue="string" value=@t.Name>@t.GetPerisanName()</SelectItem>
                                            }
                                        </Select>
                        }else if(value!=null){
                            <div>@(value.GetType().Name)</div>;
                        }
                    }
                </Column>
            </Row>
            </Heading>
            </CollapseHeader>
            <CollapseBody>
            @if (widget != null){
                <div>@Program0.CreateDynamicComponent2(this,widget,value,null,new List<System.Attribute>(),ReadOnly)</div>;
            }
            </CollapseBody>
        </Collapse >
        </Accordion>



@code
{
    public override bool inRowField()=>false;

    public bool openOject = true;
    ElementReference MyElementReference;
    ComponentBase widget = null;
    bool collapse1Visible = false;
    async Task Click0()
    {
        openOject = !openOject;
    }
    async Task Click2(string typeName)
    {

        collapse1Visible = true;
        this.typeName = typeName;
        Console.WriteLine("Click2 " + typeName);
        if(String.IsNullOrEmpty(typeName))
            return;
        var bv = value;
        var vv = await Click();
        Console.WriteLine("Click2 <>");
        Console.WriteLine(bv!=null?bv.GetHashCode():"null");
        Console.WriteLine(vv!=null?vv.GetHashCode():"null");

        if (bv != null&& value!=null && bv.GetHashCode() == vv.GetHashCode())
            return;
        if(bv==null && value==null)
            return;


        OnChange(value);
        if (vv != null)
            widget = Program0.createForm(vv.GetType(), new List<Attribute>() { });
        else
            widget = null;
        Console.WriteLine("Click2 <3>");


        Console.WriteLine("Click2 <4>");
    }
    protected override async Task OnInitializedAsync()
    {

        if (typeName == null && value != null)
        {
            typeName = value.GetType().Name;
            widget = Program0.createForm(value.GetType(), new List<Attribute>() { });
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        if (value != null && typeName != value.GetType().Name)
        {
            typeName = value.GetType().Name;

        }
    }

    protected override void OnParametersSet()
    {

        if (value != null && typeName != value.GetType().Name)
        {
            typeName = value.GetType().Name;

        }
    }




}

