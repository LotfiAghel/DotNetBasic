@typeparam TItem




@using Microsoft.AspNetCore.Components.Rendering;




@using System.Collections.Generic


@using Newtonsoft.Json.Linq;


@inherits ValueInput<TItem>
@if (value != null)
{
    widget = Program0.createForm(value.GetType(), new List<Attribute>() { });
}
<Accordion >
        <Collapse  @bind-Visible=@collapse1Visible>
             <CollapseHeader>
            <Heading Size="HeadingSize.Is6" >
                <Row Size="Size.Small">
                    <Column ColumnSize="ColumnSize.Is2">
                        <AccordionToggle >@(collapse1Visible? "close":"open")</AccordionToggle>
                        
                    </Column>
                    <Column ColumnSize=ColumnSize.Is10 >
                    @if(classess!=null && classess.Count() >0 ){
                            if(!ReadOnly){
                                
                                <MyFlatSelect TValue=Type options=classess value=@(value?.GetType() ?? null) SelectedValueChanged=@((v)=>Click2(v)) >
                                </MyFlatSelect>
                            }else if(value!=null){
                                <div>@(value.GetType().Name)</div>;
                            }
                        }
                    </Column>
                </Row>
            </Heading>
            </CollapseHeader>
            <CollapseBody>
            @if (widget != null){
                <div>@Program0.CreateDynamicComponent2(this,widget,value,null,new List<System.Attribute>(),ReadOnly)</div>;
            }
            </CollapseBody>
        </Collapse >
        </Accordion>



@code
{
    public override bool inRowField()=>false;

    ElementReference MyElementReference;
    ComponentBase widget = null;
    bool collapse1Visible = false;
    
    void Click2(Type type)
    {

        
        classType=type;
        var bv = value;

        if(classType==null){
            value=null;
        }else{
            if (value == null)
            {
                value = classType.GetConstructor(new Type[] { }).Invoke(new object[] { }) as TItem;//tmp=new ClassType()
            }else 
            if (classType != value.GetType())
            {
                try
                {
                    value = JToken.FromObject(value).ToObject(classType) as TItem; // classType.GetConstructor(new Type[] { }).Invoke(new object[] { }) as TItem;//tmp=new ClassType()
                }
                catch
                {
                    value = classType.GetConstructor(new Type[] { }).Invoke(new object[] { }) as TItem;//tmp=new ClassType()
                }
            }else{
                return ;//nothing change
            }
        }
               
        collapse1Visible = true;    
        if (OnChange!=null)
            OnChange(value);

        if (value != null)
            widget = Program0.createForm(value.GetType(), new List<Attribute>() { });
        else
            widget = null;

        StateHasChanged();    
        
    }
    
   




}

