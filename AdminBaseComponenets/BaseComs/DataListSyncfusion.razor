@typeparam TItem
@typeparam TKEY

@using Microsoft.JSInterop;
@using Models
@using System.Collections.Generic
@using Newtonsoft.Json.Linq;
@inject NavigationManager NavManager
@using Blazorise.DataGrid
@using System.ComponentModel.DataAnnotations.Schema
@inherits NullableInput2<IReadOnlyCollection<TItem>>
@inject IJSRuntime jsRuntime

@{

    if (value != null)
        Console.WriteLine("data size " + value.Count);
    else
        Console.WriteLine("data is null");
    if (value != null && chandeData != value.GetHashCode())
    {
        chandeData = value.GetHashCode();
        GetRange(0, 11);
    }
}

@if (itemName != null || true)
{

    @if (showModal)
    {
        <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Confirm action</h4>
                        <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                    </div>

                    <div>@Program0.CreateDynamicComponent2(this, w, ttvalue)</div>;

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
                    </div>

                </div>
            </div>
        </div>
    }
}
<hr />


<Modal @ref=@modalRef Style="overflow:visible">
    <ModalContent VerticalAlignment=@VerticalAlignment.Top Size=ModalSize.ExtraLarge>
        <ModalHeader>
            <ModalTitle>@(typeof(TItem).GetPerisanName())</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody Style="display: contents;">
            <GenericForm TItem=@TItem value=@selectedTItem></GenericForm>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@SaveModal">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<DataGrid TItem="TItem"
          Data=@value2
          ReadData=@OnReadData
          RowDoubleClicked=onClick
          RowClicked=onClick2
          TotalItems="@totalTItems"
          onclick=@NavigateToNewTab2
          Responsive
          ShowPager
          Borderless
          Resizable
           PageSize=15>
     <DataGridColumns>
         <!-- @bind-SelectedRow=@selectedEmployee<DataGridCommandColumn>
             <EditCommandTemplate>
                     <Button Color="Color.Primary" Clicked=@NavigateToNewTab2 >Edit</Button>
             </EditCommandTemplate>
         </DataGridCommandColumn> -->
         @foreach (var prop in propertis)
        {

            var md = MDTypeInfo.get(typeof(TItem));

            var atrs = prop.GetCustomAttributes(typeof(object), false).OfType<Attribute>().ToList();
            var extaAtr = md.pattrs[prop].attrs;
            atrs.AddRange(extaAtr);


            if (prop.PropertyType.IsClass && prop.PropertyType != typeof(Guid) && prop.PropertyType != typeof(string) && prop.PropertyType != typeof(String) && atrs.OfType<ForeignKeyAttribute>().Count() > 0)//TODO shuld check forgeinkey
                continue;
            var widget = Program0.createWidget(prop.PropertyType, atrs);
            //var f = Program0.createForm(prop.PropertyType, prop.GetCustomAttributes(typeof(object), false).OfType<Attribute>().ToList());
            var persianLabel = prop.GetPerisanName();
            @if (widget != null)
            {
                <DataGridColumn TItem=TItem Field=@prop.Name Caption=@persianLabel>

                    <DisplayTemplate>
                        @Program0.CreateDynamicComponent2(this, widget, prop.GetValue(context),ReadOnly:true)
                    </DisplayTemplate>

                </DataGridColumn>
            }
            else
            {
                <DataGridColumn TItem=TItem Field=@prop.Name Caption=@persianLabel>

                </DataGridColumn>
            }

        }
    </DataGridColumns>
    <!-- <DetailRowTemplate>
    @{
        var f2 = Program0.createForm(typeof(TItem), new());
                <div>@Program0.CreateDynamicComponent2(this, f2, context)</div>

    }
    </DetailRowTemplate> -->
</DataGrid>



@code {


    public async Task NavigateToNewTab2(MouseEventArgs args)
    {
        if (args.CtrlKey)
        {
            var itemId = selectedTItem.id;
            string url = $"{EntityName}/edit/{itemId}";

            await jsRuntime.InvokeAsync<object>("open", url, "_blank");
        }
        if (args.AltKey)
        {
            ShowModal();
        }

    }


    private Modal modalRef;

    private Task ShowModal()
    {
        //newItem = new TItem();
        //addingItem = typeof(TItem).GetConstructor(new Type[] { }).Invoke(new object[] { }) as TItem;// new genericArgs[0]();

        return modalRef.Show();
    }

    private Task HideModal()
    {

        return modalRef.Hide();
    }
    private Task SaveModal()
    {
        var dataManager = Program0.getEntityManager<TItem, TKEY>();
        dataManager.update(selectedTItem);
        return modalRef.Hide();
    }
}
