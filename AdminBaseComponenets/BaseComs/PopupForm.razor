@typeparam TItem

@inherits ValueInput<TItem>

@{
    popupWidget = Program0.createForm(typeof(TItem), new List<Attribute>());
    ReadOnly = !Program0.checkPermission<Models.UpdateAccess>(typeof(TItem));
}

<ModalHeader>
    <ModalTitle>Edit</ModalTitle>
    <CloseButton />
    <Button Color="Color.Secondary" Clicked="ModalService.Hide">Close</Button>
    <Button Color="Color.Primary" Clicked="@SaveModal">Save Changes</Button>
</ModalHeader>
<ModalBody>
    @if (!typeof(TItem).IsAbstract) {
        <div>@Program0.CreateDynamicComponent2(this, popupWidget, value,changeRefrence:OnChange2,ReadOnly:ReadOnly)</div>;
    }
    else
    {
        <PointerInput2 TItem=@TItem value=@value OnChange=OnChange2></PointerInput2>
    }
</ModalBody>
<ModalFooter>
    <Button Color="Color.Secondary" Clicked="ModalService.Hide">Close</Button>
    <Button Color="Color.Primary" Clicked="@SaveModal">Save Changes</Button>
</ModalFooter>



@code{
    [Inject] public IModalService ModalService { get; set; }
    ComponentBase popupWidget = null;
    [Parameter] public Func<TItem, Task> OnSuccess { get; set; }
    //[Parameter] public Func<TItem, Task> oncha { get; set; }
    private void OnChange2(object x)
    {
        OnChange?.Invoke(x);
    }

    private async Task SaveModal(MouseEventArgs obj)
    {
        OnSuccess?.Invoke(value);
        await ModalService.Hide();
        //throw new NotImplementedException();
    }

    private void HideModal(MouseEventArgs obj)
    {
        
        //throw new NotImplementedException();
    }

}