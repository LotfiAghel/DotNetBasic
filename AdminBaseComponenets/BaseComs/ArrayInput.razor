@typeparam TItem

@inherits ArrayInputBase<TItem>

@{
     var wtmp = Program0.getCollectionItemAttrs(Attributes);
     _itemWidget = Program0.createForm4(typeof(TItem), wtmp);
}
   



        @if (value != null)
        {
             <Accordion>
        <Collapse  Visible=@_collapse1Visible>
             <CollapseHeader>
                  <Row>
                    <Column ColumnSize="ColumnSize.Is4">
                        <Button Clicked="@(()=>_collapse1Visible = !_collapse1Visible)" >@(_collapse1Visible? "close":"open")</Button>
                    </Column>
                   <Column ColumnSize="ColumnSize.Is4">
                        <Button Clicked="@(()=>_collapse1Visible = !_collapse1Visible)" >count: @value.Count</Button>
                  </Column>
                        <Column ColumnSize="ColumnSize.Is4">
                            <Button Clicked=@setNull>set null</Button>
                        </Column>
                  </Row>
              </CollapseHeader>
            <CollapseBody>
                @{
            int j = 0;
            foreach(var unused in value){
                int k = j;      
                Action<object> onChangeReference = (x) =>
                            {
                                Console.WriteLine("setFValue0(j, x)");
                                setValue(k, x);
                            };
                @if (!ReadOnly)
                {

                    <Button  Clicked="() => remove(k)" style="position: absolute; z-index: 10; margin: .5rem; left: 0;">
                        <mat-icon class="material-icons" style="font-size:14px; font-weight:bold; color:red">close</mat-icon>
                    </Button>
                }
                <Div >
                    @if (!ReadOnly)
                    {

                        <Button  Clicked="() => remove(k)" style="position: absolute; z-index: 10; margin: .5rem; left: 0;">
                            <mat-icon class="material-icons" style="font-size:14px; font-weight:bold; color:red">close</mat-icon>
                        </Button>
                    }
                    @{
                        if (_itemWidget != null)
                        {
                            <div>@Program0.CreateDynamicComponent2(this, _itemWidget, value[k], onChangeReference,null,ReadOnly)</div>
                        }
                    }
                </Div>
               

                ++j;
            }
                  


            
            @if(!ReadOnly){
                <Button Outlined="true" Clicked="@Add">add </Button>
            }
             }
             </CollapseBody>
              </Collapse>
    </Accordion>
        }
        else
        {
            @if(!ReadOnly){
                <Button Outlined="true" Clicked="@createArray">new </Button>
            }
        }





@code
{
    public override bool inRowField()=>false;
    ComponentBase _itemWidget = null;
    bool _collapse1Visible = false;

    Task createArray()
    {
        value = new List<TItem>();
        OnChange(value);
        return Task.CompletedTask;
    }

    Task Add()
    {
        value.Add(default(TItem));
        return Task.CompletedTask;
    }

    public override Task<bool> setNull()
    {
        value = null;
        OnChange?.Invoke(value);
        return Task.FromResult(true);
    }
    
    protected override Task OnInitializedAsync()
    {
        var tmp = Program0.getCollectionItemAttrs(Attributes);
        _itemWidget = Program0.createForm4(typeof(TItem), tmp);
        return Task.CompletedTask;
    }

    private void remove(int o)
    {
        if(value!=null && value.Count > o)
            value.RemoveAt(o);
    }
}

