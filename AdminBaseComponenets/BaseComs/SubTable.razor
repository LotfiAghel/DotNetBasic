@typeparam TItem
@typeparam TKEY
@typeparam TMKEY
@typeparam TMASTER
@inherits NullableInput2<IReadOnlyCollection <TItem>>
@using System.ComponentModel.DataAnnotations.Schema;
@using Models
@using AdminBaseComponenets
@using System.ComponentModel;
@using Tools;
@using Blazorise.Components
@using Blazorise.Snackbar
<Button Outlined="true" Clicked="@Click">@ButtonState</Button>
    <Button Color="Color.Primary" Clicked="@ShowModal">create new</Button>
@if(value!=null){
    <DataListSyncfusion TItem=TItem TKEY=TKEY value=@value> </DataListSyncfusion>
}else{
    Click();
    if(ButtonState.Length<3)
        ButtonState="click to load";
}



@code {
    [Inject] INotificationService NotificationService { get; set; }
    [Inject] public IModalService ModalService { get; set; }
    // reference to the modal component
    
    
    public Task ShowFormulary()
    {
        
        return ModalService.Show<PopupForm<TItem>>( x =>
            {
                //x.Add( x => x.OnValidate, FormularyValidate );
                x.Add( x => x.OnSuccess, SaveModal );
                x.Add(x=> x.OnChange,OnChange2);
                x.Add(x=>x.value,addingItem);
            },
            new ModalInstanceOptions()
            {
                UseModalStructure = false,
                Style = "overflow:visible",
                Size = ModalSize.ExtraLarge,
                Scrollable = true
            } );
    }
    
    private Task<bool> FormularyValidate(TItem employee)
    {
        return Task.FromResult(true);
    }
    private Task FormularySuccess( TItem employee )
    {
       
        return InvokeAsync( StateHasChanged );
    }
    
    private void OnChange2(object x)
    {
        addingItem = x as TItem;// new genericArgs[0]();
        var fmp = typeof(TMASTER).GetProperty(collectionName).GetCustomFirstAttributes<InversePropertyAttribute>().Property;
        var fidp = typeof(TItem).GetProperty(fmp).GetCustomFirstAttributes<ForeignKeyAttribute>().Name;
        var fidpp = typeof(TItem).GetProperty(fidp);
        fidpp.SetValue(addingItem, masterEnityId);
    }
    private Task ShowModal()
    {
        var titem = typeof(TItem);
        if(addingItem==null){
            if (!titem.IsAbstract)
            {
                addingItem = titem.GetConstructor(new Type[] { }).Invoke(new object[] { }) as TItem;// new genericArgs[0]();
                var fmp = typeof(TMASTER).GetProperty(collectionName).GetCustomFirstAttributes<InversePropertyAttribute>().Property;
                var fidp = typeof(TItem).GetProperty(fmp).GetCustomFirstAttributes<ForeignKeyAttribute>().Name;
                var fidpp = typeof(TItem).GetProperty(fidp);
                fidpp.SetValue(addingItem, masterEnityId);
            }
            else
            {
                addingItem = null;
                var fmp = typeof(TMASTER).GetProperty(collectionName).GetCustomFirstAttributes<InversePropertyAttribute>().Property;
                var fidp = typeof(TItem).GetProperty(fmp).GetCustomFirstAttributes<ForeignKeyAttribute>().Name;
                var fidpp = typeof(TItem).GetProperty(fidp);
                //fidpp.SetValue(addingItem, masterEnityId);
            }
        }

        return ShowFormulary();
        //return modalRef.Show();
    }

   
    private async Task SaveModal(TItem data)
    {
        if (Data is null)
            Data = Program0.getEntityManager<TItem, TKEY>();
        //var dataManager=Program0.getEntityManager<TMASTER, TMKEY>();
        try
        {
            await Data.post(addingItem);
            NotificationService.Success("success", "save ok");
            addingItem = null;
        }
        catch(Exception e)
        {
             NotificationService.Warning(e.Message, "save error");
        }
        await Click();
        
        return;
    }
}
