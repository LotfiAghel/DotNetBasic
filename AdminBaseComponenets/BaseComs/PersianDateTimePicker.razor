@using System.Collections.Generic
@using Blazor.PersianDatePicker
@inherits ValueInput<DateTime>
@{
    Console.WriteLine($"PersianDateTimepicker {value}");
}
<Row>
    <Column ColumnSize=ColumnSize.Is8>
        <InputPersianDatePicker Id="@($"id-{Guid.NewGuid().ToString()}")" @key="@($"id-{Guid.NewGuid().ToString()}")"
                                @bind-Value=@dateValue
                                Visible="true"
                                Disabled="@ReadOnly"
                                PickerAlign="Align.Right"
                                PickerOffsetTopPositionInPixels="0"
                                InitialValue="false"
                                CalendarType="Calendar.DualModeJalaliDefault"
                                DigitType="DigitType.BasedOnCalendar"
                                DateFormat="DateFormat.yyyy_slash_MM_slash_dd"
                                MinDateSetOnToday="false"
                                Placeholder="انتخاب تاریخ"
                                CssClass="form-control"
                                Theme="PickerTheme.Default"
                                Style="font-family: tahoma; margin-left:20px; float: right"
                                OnChange="@DateValueChangeHandler" />
    </Column>
    <Column ColumnSize=ColumnSize.Is4>
        <Addons>
            <Addon AddonType="AddonType.Body">
                <TimePicker @ref="@timePicker" TValue="TimeSpan?" Time=@timeValue TimeChanged="@OnTimeChanged" />
            </Addon>
            <Addon AddonType="AddonType.End">
                <Button Color="Color.Light" Clicked="@(()=>timePicker.ToggleAsync())">
                    <Icon Name="IconName.CalendarDay" />
                </Button>
            </Addon>
        </Addons>
        <!--<TimeEdit TValue="TimeSpan?" Time=@timeValue TimeChanged="@OnTimeChanged"  /> -->
    </Column>
    

</Row>

<div>@($"{dateValue} --> {dateValue2}  {value.ToString()}")</div>

@code
{
    TimePicker<TimeSpan?> timePicker;

    System.Globalization.PersianCalendar pc = new System.Globalization.PersianCalendar();




    private string dateValue { get; set; } = DateTime.Now.ToPersianDateString("yyyy/MM/dd");
    private string dateValue2 => value>new DateTime(2000,1,1) ? value.ToPersianDateString("yyyy/MM/dd"):"TODO";
    private TimeSpan timeValue {
        get; 
        set; 
    } = new TimeSpan(0);

    DateTime? prvValue;
    private TimeSpan selectedTime;/*{ 
    get => TimeZoneInfo.ConvertTimeFromUtc(value, TimeZoneInfo.Local) - TimeZoneInfo.ConvertTimeFromUtc(value, TimeZoneInfo.Local).Date;
    set => this.value = TimeZoneInfo.ConvertTimeToUtc(TimeZoneInfo.ConvertTimeFromUtc(this.value, TimeZoneInfo.Local).Date + value);
    }*/



    protected override void OnInitialized()
    {
        Console.WriteLine($"PersianDateTimepicker OnInitialized");
        if ( value != DateTime.MinValue)
        {
            Console.WriteLine($"PersianDateTimepicker OnInitialized 1");
            DateTime databaseUtcTime = TimeZoneInfo.ConvertTimeFromUtc(value,  TimeZoneInfo.Local);




            dateValue = databaseUtcTime.ToPersianDateString("yyyy/MM/dd");
            timeValue = databaseUtcTime-databaseUtcTime.Date; ;
            Console.WriteLine($"PersianDateTimepicker OnInitialized {dateValue}");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"PersianDateTimepicker OnInitializedAsync");
        if ( value != DateTime.MinValue)
        {
            Console.WriteLine($"PersianDateTimepicker OnInitializedAsync 1");





            DateTime databaseUtcTime = TimeZoneInfo.ConvertTimeFromUtc(value,  TimeZoneInfo.Local);

            dateValue = databaseUtcTime.ToPersianDateString("yyyy/MM/dd");
            timeValue = databaseUtcTime-databaseUtcTime.Date; ;
            Console.WriteLine($"PersianDateTimepicker OnInitializedAsync {dateValue}");
        }
    }
    Task OnTimeChanged(TimeSpan? Time)
    {
        if (Time.HasValue)
            timeValue = Time.Value;
        else
            timeValue = new TimeSpan(0);

        var date = dateValue.toPersianDate();
        DateTime databaseUtcTime = pc.ToDateTime(pc.GetYear(date), pc.GetMonth(date), pc.GetDayOfMonth(date), timeValue.Hours, timeValue.Minutes, timeValue.Seconds, 0);
        value = TimeZoneInfo.ConvertTimeToUtc(databaseUtcTime, TimeZoneInfo.Local);
        if (prvValue != value)
        {
            OnChange(value);
        }
        prvValue = value;

        return Task.CompletedTask;
    }
   

    async Task DateValueChangeHandler()
    {

        var date = dateValue.toPersianDate();
        DateTime databaseUtcTime;
        //if (timeValue.HasValue)
            databaseUtcTime = pc.ToDateTime(pc.GetYear(date), pc.GetMonth(date), pc.GetDayOfMonth(date), timeValue.Hours, timeValue.Minutes, timeValue.Seconds, 0);
        //else
        //    databaseUtcTime = pc.ToDateTime(pc.GetYear(date), pc.GetMonth(date), pc.GetDayOfMonth(date), 0, 0, 0, 0);



         
        //var japaneseTimeZone =;//TimeZoneInfo.FindSystemTimeZoneById("Tokyo Standard Time");
        value = TimeZoneInfo.ConvertTimeToUtc(databaseUtcTime,  TimeZoneInfo.Local);


        Console.WriteLine("PersianDateTimepicker value: " + this.value.ToString());

        if (prvValue != value)
        {
            OnChange(value);
        }
        prvValue = value;
    }

   

}

<style>
    .CustomTimePicker {
        height: 100%;
    }

    .e-timepicker {
        height: unset !important;
    }
</style>

